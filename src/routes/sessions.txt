// router.post('/registro', async (req, res) => {
//     try {
//         const {first_name, last_name, email, password} = req.body
//         if(!first_name || !last_name || !email || !password) {
//             return res.status(400).json({message: "Incomplete values"})
//         }

//         const existUser = await usuariosService.getUserByEmail(email)
//         if(existUser) {
//             return res.status(400).json({message: "User already exists."})
//         }

//         if(email==="admin@test.com" && password==="123"){
//             usuario={email, rol:"admin"}
//         }

//         const hashedPassword = await creaHash(password)
//         const newUser = {
//             first_name,
//             last_name,
//             email, 
//             password: hashedPassword
//         }

//         let result = await usuariosService.createUser(newUser)

//         const newCart = await cartService.createCart({ userId: result._id });
//         await usuariosService.updateUser(result._id, { cartId: newCart._id });
//         console.log(result._id, { cartId: newCart._id })
//         res.send({status: "success", payload: result._id})
//     } catch (error) {
//         console.log(error)
//         return res.status(500).json({message: "Server error"})
//     }
// });



router.post("/login", async (req, res) => {
    const {email, password} = req.body

    if (!email || !password) {
        return res.status(400).json({message: "Incomplete values"})
    }
    const user = await usuariosService.getUserByEmail(email)
    if(!user){
        return res.status(400).json({message: "User not found."})
    }

    const isValidPassword = await validaPassword(password, user.password)

    if(!isValidPassword) {
        return res.status(400).json({message: "Invalid password."})
    }

    const userDto = UsuariosDTO.getUserTokenFrom(user)
    const token = jwt.sign(userDto, config.general.PASSWORD, {expiresIn:"1h"})
    res.cookie("CoderCoder123", token, {maxAge:3600000}).send({status:"success", user, token})
})




auth 


import UsuariosDTO from "../DTO/UsuariosDTO.js";

export const auth = (roles) => {
    return (req, res, next) => {
        if (!req.isAuthenticated()) {
            return res.status(401).json({ error: "No hay usuario autenticado." });
        }

        if (!req.user) {
            return res.status(401).json({ error: "No hay usuario autenticado." });
        }

        const userDTO = new UsuariosDTO(req.user);

        if (roles && !roles.includes(userDTO.role)) {
            return res.status(403).json({ error: "No tienes permiso para acceder a este recurso." });
        }

        req.UsuariosDTO = userDTO;
        next();
    };
};