import { UsuariosDTO } from "../DTO/UsuariosDTO.js";
import CustomError from "../errors/CustomError.js";
import { ERRORES } from "../errors/errors.js";
import { argsUser } from "../errors/userError.js";
import { sessionsService } from "../services/user.service.js";


function isValidObjectId(id) {
    return mongoose.Types.ObjectId.isValid(id);
}

export default class SessionsController {

    static getAll = async (req, res) => {

        let users = await sessionsService.getUsers()
        if (!Array.isArray(users) || users.length === 0) {
            res.status(404).json({ message: 'No users found' });
            return;
        }

        let usuario = null
        if (email === "admin@test.com" && password === "123") {
            usuario = { email, rol: "admin" }
        } else {
            usuario = { email, rol: "user" }
        }

        const usersDTO = users.map((user) => new UsuariosDTO(user));



        res.setHeader('Content-Type', 'application/json')
        res.status(200).json(usersDTO)
    }

    static getByEmail = async (req, res) => {

        try {
            let user = await sessionsService.getUserByEmail(req.params.email)
            if (user) {
                res.setHeader('Content-Type', 'application/json')
                return res.status(200).json({ user })
            } else {
                res.setHeader('Content-Type', 'application/json')
                return res.status(400).json({ error: `No existe usuario con el email ${email}` })
            }
        } catch (error) {
            console.log(error)
            CustomError.createError({ name: 'Error interno del servidor', cause: argsUser(req.body), message: 'Error interno del servidor', code: ERRORES['error interno del servidor'] })
        }
    }


    static getById = async (req, res) => {
        try {
            let userById = await sessionsService.getUserById(req.params.id)

            if (!isValidObjectId(id)) {
                res.setHeader("Content-Type", "application/json");
                return res.status(400).json({ error: "ID inválido" });
            }

            if (userById) {
                res.setHeader('Content-Type', 'application/json')
                return res.status(200).json({ userById })
            } else {
                res.setHeader('Content-Type', 'application/json')
                return res.status(400).json({ error: `No existe usuario con el id ${id}` })
            }
        } catch (error) {
            console.log(error)
            CustomError.createError({ name: 'Error interno del servidor', cause: argsUser(req.body), message: 'Error interno del servidor', code: ERRORES['error interno del servidor'] })
        }
    }

    static create = async (req, res) => {
        let { first_name, last_name, email, rol } = req.body

        if (!email) {
            CustomError.createError({ name: 'Falta completar campos', cause: argsUser(req.body), message: 'Falta completar campos', code: ERRORES['argumentos inválidos'] })
        }

        try {
            let existe = await sessionsService.getUserByEmail(email)

            if (existe) {
                res.setHeader('Content-Type', 'application/json')
                return res.status(400).json({ error: 'Ya existe el email' })
            }

            if ('rol' == "") {
                rol = 'user'
            }

            let newUser = await sessionsService.createUser(first_name, last_name, email, rol)
            return res.status(200).json({ newUser })
        } catch (error) {
            console.log(error)
            CustomError.createError({ name: 'Error interno del servidor', cause: argsUser(req.body), message: 'Error interno del servidor', code: ERRORES['error interno del servidor'] })
        }
    }

}